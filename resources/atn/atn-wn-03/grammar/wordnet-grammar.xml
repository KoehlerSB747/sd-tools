<?xml version="1.0" encoding="utf-8" ?>

<grammar>

	<classifiers>
    <!-- syntactic categories -->
    <wn-adj>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='adj' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-adj>
    <wn-adv>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='adv' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-adv>
    <wn-auxv>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='auxv' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-auxv>
    <wn-conj>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='conj' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-conj>
    <wn-det>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='det' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-det>
    <wn-noun>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='noun' type='string' when='equals'>_wn_cat</feature>
        <feature name='unknown' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-noun>
    <wn-prep>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='prep' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-prep>
    <wn-post>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='post' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-post>
    <wn-pronoun>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='pronoun' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-pronoun>
    <wn-verb>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='verb' type='string' when='equals'>_wn_cat</feature>
        <feature name='unknown' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-verb>

    <!-- tags -->
    <wn-Numeric>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='Numeric' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-Numeric>
    <wn-properNoun>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='ProperNoun' type='string' when='equals'>_wn_cat</feature>
<!--
        <feature name='person' type='string' when='equals'>_wn_cat</feature>
        <feature name='pronoun' type='string' when='equals'>_wn_cat</feature>
-->
      </classifiers>
    </wn-properNoun>

    <!-- unknown -->
    <wn-unknown>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='unknown' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-unknown>

    <!-- semantic categories -->
    <wn-all>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='all' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-all>
    <wn-pert>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='pert' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-pert>
    <wn-ppl>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='ppl' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-ppl>
    <wn-act>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='act' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-act>
    <wn-animal>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='animal' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-animal>
    <wn-artifact>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='artifact' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-artifact>
    <wn-attribute>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='attribute' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-attribute>
    <wn-body>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='body' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-body>
    <wn-body>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='body' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-body>
    <wn-cognition>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='cognition' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-cognition>
    <wn-communication>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='communication' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-communication>
    <wn-event>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='event' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-event>
    <wn-feeling>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='feeling' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-feeling>
    <wn-food>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='food' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-food>
    <wn-group>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='group' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-group>
    <wn-location>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='location' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-location>
    <wn-motive>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='motive' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-motive>
    <wn-object>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='object' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-object>
    <wn-person>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='person' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-person>
    <wn-phenomenon>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='phenomenon' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-phenomenon>
    <wn-plant>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='plant' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-plant>
    <wn-possession>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='possession' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-possession>
    <wn-process>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='process' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-process>
    <wn-quantity>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='quantity' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-quantity>
    <wn-relation>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='relation' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-relation>
    <wn-shape>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='shape' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-shape>
    <wn-state>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='state' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-state>
    <wn-substance>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='substance' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-substance>
    <wn-time>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='time' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-time>
    <wn-Tops>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='Tops' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-Tops>
    <wn-body>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='body' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-body>
    <wn-change>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='change' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-change>
    <wn-cognition>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='cognition' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-cognition>
    <wn-communication>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='communication' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-communication>
    <wn-competition>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='competition' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-competition>
    <wn-consumption>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='consumption' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-consumption>
    <wn-contact>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='contact' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-contact>
    <wn-creation>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='creation' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-creation>
    <wn-emotion>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='emotion' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-emotion>
    <wn-modal>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='modal' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-modal>
    <wn-motion>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='motion' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-motion>
    <wn-perception>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='perception' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-perception>
    <wn-possession>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='possession' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-possession>
    <wn-social>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='social' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-social>
    <wn-stative>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='stative' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-stative>
    <wn-weather>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='weather' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </wn-weather>

    <pre-verb3>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <terms caseSensitive="true">
        <term>to</term>
        <term>whether</term>
      </terms>
    </pre-verb3>      

    <pre-verb10>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <terms caseSensitive="true">
        <term>to</term>
      </terms>
    </pre-verb10>

    <pre-verb11>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <terms caseSensitive="true">
        <term>into</term>
      </terms>
    </pre-verb11>

    <adj-noun>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <classifiers>
        <feature name='adj' type='string' when='equals'>_wn_cat</feature>
        <feature name='noun' type='string' when='equals'>_wn_cat</feature>
        <feature name='unknown' type='string' when='equals'>_wn_cat</feature>
      </classifiers>
    </adj-noun>

    <tobe>
      <jclass>org.sd.atn.RoteListClassifier</jclass>
      <terms caseSensitive="true">
        <term>is</term>
        <term>was</term>
      </terms>
    </tobe>

	</classifiers>

	<rules>

    <S start='true' id="S">
      <NP />
      <VPx />

      <CS optional="true" />
    </S>

    <!-- imperative form "Let me go" -->
    <CMD start='true' id="CMD">
      <VPx />

      <C-CMD optional="true" />
    </CMD>

    <CS>
      <wn-conj />
      <S />
    </CS>

    <CS>
      <!-- step to verify there is preceding conjuctive punctuation -->
      <verify ignoreToken="true" consumeToken="false">
        <predelim>
          <disallowall />
          <require type="substr">,</require>
          <require type="substr">;</require>
        </predelim>
      </verify>
      <S />
    </CS>

    <C-CMD>
      <wn-conj />
      <CMD />
    </C-CMD>

    <C-CMD>
      <!-- step to verify there is preceding conjuctive punctuation -->
      <verify ignoreToken="true" consumeToken="false">
        <predelim>
          <disallowall />
          <require type="substr">,</require>
          <require type="substr">;</require>
        </predelim>
      </verify>
      <CMD />
    </C-CMD>


    <NP start="false" id="NP-detailed">
      <wn-det>
        <postdelim>
          <disallowall />
        </postdelim>
      </wn-det>
      <wn-adv optional="true" repeats="true">
        <postdelim>
          <disallowall />
        </postdelim>
      </wn-adv>
      <wn-adj optional="true" repeats="true">
        <postdelim>
          <disallowall />
        </postdelim>
      </wn-adj>
      <wn-noun repeats="true">
        <predelim>
          <disallowall />
        </predelim>
      </wn-noun>

      <!-- recursively accept conjoined noun phrases -->
      <CNP optional="true" />
    </NP>

    <NP start="false" id="NP-simple">
      <wn-noun />

      <!-- recursively accept conjoined noun phrases -->
      <CNP optional="true" />
    </NP>

    <NP start="false" id="NP-entity">
      <wn-properNoun />

      <!-- recursively accept conjoined noun phrases -->
      <CNP optional="true" />
    </NP>


    <NP start="false" id="NP-plural">
      <wn-adv optional="true" repeats="true">
        <postdelim>
          <disallowall />
        </postdelim>
      </wn-adv>
      <wn-adj optional="true" repeats="true">
        <postdelim>
          <disallowall />
        </postdelim>
      </wn-adj>
      <wn-noun optional="true" repeats="true">
        <postdelim>
          <disallowall />
        </postdelim>
      </wn-noun>
      <wn-noun>
        <test>
          <jclass>org.sd.atn.TextTest</jclass>
          <regexes>
            <regex type="find">^.+s$</regex>
          </regexes>
        </test>
      </wn-noun>

      <!-- recursively accept conjoined noun phrases -->
      <CNP optional="true" />
    </NP>

    <CNP>
      <wn-conj />
      <NP />
    </CNP>

    <CNP>
      <NP>
        <!-- first token must be preceded by a comma in lieu of a conjunction -->
        <test>
          <jclass>org.sd.atn.StateSelectionTest</jclass>
          <selectState distance="0" gravity="firstMatch">
            <predelim>
              <require type="substring">,</require>
            </predelim>
          </selectState>
        </test>
      </NP>
    </CNP>


    <PP start="false" id="PP">
      <wn-prep>
        <postdelim>
          <disallowall />
        </postdelim>
      </wn-prep>
      <NP />
      <PP optional="true" />
    </PP>


    <VPx>
      <VP1 />
    </VPx>

    <VP1>
      <wn-verb>
        <test frames="1,2" wn-dict="wn-dict">
          <jclass>org.sd.atnexec.VerbFrameCheck</jclass>
        </test>
      </wn-verb>
    </VP1>

    <VPx>
      <VP2 />
    </VPx>

    <VP2>
      <wn-verb>
        <test frames="8,9,10,11" wn-dict="wn-dict">
          <jclass>org.sd.atnexec.VerbFrameCheck</jclass>
        </test>
      </wn-verb>
      <NP />
      <!-- PP optional="true" / -->
    </VP2>

    <VPx>
      <VP3 />
    </VPx>

    <VP3>
      <wn-verb>
        <test frames="28,29,32,33,35" wn-dict="wn-dict">
          <jclass>org.sd.atnexec.VerbFrameCheck</jclass>
        </test>
      </wn-verb>
      <pre-verb3 optional="true" />
      <wn-verb />
    </VP3>

    <VPx>
      <VP4 />
    </VPx>

    <VP4>
      <wn-verb>
        <test frames="6,7" wn-dict="wn-dict">
          <jclass>org.sd.atnexec.VerbFrameCheck</jclass>
        </test>
      </wn-verb>
      <adj-noun />
    </VP4>

    <VPx>
      <VP5 />
    </VPx>

    <VP5>
      <wn-verb>
        <test frames="12,13,22,27" wn-dict="wn-dict">
          <jclass>org.sd.atnexec.VerbFrameCheck</jclass>
        </test>
      </wn-verb>
      <PP />
    </VP5>

    <VPx>
      <VP6 />
    </VPx>

    <VP6>
      <wn-verb>
        <test frames="6,7" wn-dict="wn-dict">
          <jclass>org.sd.atnexec.VerbFrameCheck</jclass>
        </test>
      </wn-verb>
      <that />
      <S />
    </VP6>

    <VPx>
      <VP7 />
    </VPx>

    <VP7>
      <wn-verb>
        <test frames="14" wn-dict="wn-dict">
          <jclass>org.sd.atnexec.VerbFrameCheck</jclass>
        </test>
      </wn-verb>
      <NP />
      <!-- PP optional="true" / -->
      <NP />
      <!-- PP optional="true" / -->
    </VP7>

    <VPx>
      <VP8 />
    </VPx>

    <VP8>
      <wn-verb>
        <test frames="5" wn-dict="wn-dict">
          <jclass>org.sd.atnexec.VerbFrameCheck</jclass>
        </test>
      </wn-verb>
      <NP />
      <!-- PP optional="true" / -->
      <adj-noun />
      <!-- PP optional="true" / -->
    </VP8>

    <VPx>
      <VP9 />
    </VPx>

    <VP9>
      <wn-verb>
        <test frames="15,16,17,18,19,20,21,31" wn-dict="wn-dict">
          <jclass>org.sd.atnexec.VerbFrameCheck</jclass>
        </test>
      </wn-verb>
      <NP />
      <PP />
    </VP9>

    <VPx>
      <VP10a />
    </VPx>

    <VP10a>
      <wn-verb>
        <test frames="24,25" wn-dict="wn-dict">
          <jclass>org.sd.atnexec.VerbFrameCheck</jclass>
        </test>
      </wn-verb>
      <NP />
      <!-- PP optional="true" / -->
      <pre-verb10 optional="true" />
      <wn-verb />
    </VP10a>

    <VPx>
      <VP10b />
    </VPx>

    <VP10b>
      <wn-verb>
        <test frames="25" wn-dict="wn-dict">
          <jclass>org.sd.atnexec.VerbFrameCheck</jclass>
        </test>
      </wn-verb>
      <S />
    </VP10b>

    <VPx>
      <VP10c />
    </VPx>

    <VP10c>
      <wn-verb verbose="false">
        <test frames="24" wn-dict="wn-dict" verbose="false">
          <jclass>org.sd.atnexec.VerbFrameCheck</jclass>
        </test>
      </wn-verb>
      <CMD />
    </VP10c>

    <VPx>
      <VP11 />
    </VPx>

    <VP11>
      <wn-verb>
        <test frames="30" wn-dict="wn-dict">
          <jclass>org.sd.atnexec.VerbFrameCheck</jclass>
        </test>
      </wn-verb>
      <NP />
      <!-- PP optional="true" / -->
      <pre-verb11 optional="true" />
      <wn-verb />
      <NP />
      <!-- PP optional="true" / -->
    </VP11>

    <VPx>
      <VP12 />
    </VPx>

    <VP12>
      <NP />
      <!-- PP optional="true" / -->
      <wn-verb>
        <test frames="23" wn-dict="wn-dict">
          <jclass>org.sd.atnexec.VerbFrameCheck</jclass>
        </test>
      </wn-verb>
    </VP12>

    <VPx>
      <VP13 />
    </VPx>

    <VP13>
      <tobe />
      <wn-verb>
        <test frames="3" wn-dict="wn-dict">
          <jclass>org.sd.atnexec.VerbFrameCheck</jclass>
        </test>
      </wn-verb>
    </VP13>

    <VPx>
      <VP14 />
    </VPx>

    <VP14>
      <tobe />
      <wn-verb>
        <test frames="3" wn-dict="wn-dict">
          <jclass>org.sd.atnexec.VerbFrameCheck</jclass>
        </test>
      </wn-verb>
      <PP />
    </VP14>

<!--
    <VP>
      <VS />
      <DO optional="true" />

      <CVP optional="true" repeats="true" />
    </VP>

    <DO>
      <PP />
    </DO>

    <DO>
      <NP repeats="false" />
    </DO>

    <DO>
      <wn-adv optional="true" repeats="true" />
      <wn-adj>
        <test reverse="true">
          <jclass>org.sd.atn.TokenTest</jclass>
          <classifier cat="wn-noun" />
        </test>
      </wn-adj>
    </DO>

    <DO>
      <S />
    </DO>

    <CVP>
      <wn-conj optional="true" />
      <VP />
    </CVP>





    <VS start="false" id="VS">
      <wn-modal optional="true">
        <postdelim>
          <disallowall />
        </postdelim>
      </wn-modal>
      <wn-adv optional="true">
        <postdelim>
          <disallowall />
        </postdelim>
      </wn-adv>
      <wn-auxv optional="true">
        <postdelim>
          <disallowall />
        </postdelim>
      </wn-auxv>
      <to optional="true">
        <postdelim>
          <disallowall />
        </postdelim>
      </to>
      <wn-adv optional="true">
        <postdelim>
          <disallowall />
        </postdelim>
      </wn-adv>
      <verb>
        <postdelim>
          <disallowall />
        </postdelim>
      </verb>
    </VS>
-->

	</rules>

</grammar>
